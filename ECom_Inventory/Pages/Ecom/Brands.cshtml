@page
@model ECom_Inventory.Pages.Ecom.BrandsModel
@using Microsoft.AspNetCore.Authorization
@inject IAuthorizationService AuthorizationService
@{
    Layout = "_Layout";
    ViewData["Title"] = "Brands";
}

<h2 class="mb-4">Manage Brands</h2>
@if ((await AuthorizationService.AuthorizeAsync(User, "AdminOnly")).Succeeded)
{
    <button class="btn btn-success mb-3" id="addBrandBtn">Add Brand</button>
}

<div class="card">
    <div class="card-body">
        <table class="table table-hover my-0">
            <thead>
                <tr>
                    <th>Name</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody id="brandTableBody">
                @foreach (var brand in Model.Brands)
                {
                    <tr>
                        <td>@brand.Name</td>
                        <td>
                            <button class="btn btn-outline-primary btn-sm edit-btn"
                                    data-id="@brand.Id"
                                    data-name="@brand.Name">
                                ✏
                            </button>
                            @if ((await AuthorizationService.AuthorizeAsync(User, "AdminOnly")).Succeeded)
                            {
                                <button class="btn btn-outline-danger btn-sm delete-btn" data-id="@brand.Id">🗑</button>
                            }
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

<!-- Add/Edit Brand Modal -->
<div class="modal fade" id="brandModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="modalTitle">Add Brand</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="brandForm">
                    @Html.AntiForgeryToken()
                    <input type="hidden" id="brandId">
                    <div class="mb-3">
                        <label class="form-label">Name</label>
                        <input type="text" class="form-control" id="brandName" required>
                    </div>
                    <button type="submit" class="btn btn-success">Save</button>
                </form>
            </div>
        </div>
    </div>
</div>

<script>
    const token = document.querySelector('input[name="__RequestVerificationToken"]').value;
    document.addEventListener("DOMContentLoaded", function () {
        let brandModal = new bootstrap.Modal(document.getElementById("brandModal"));
        const brandForm = document.getElementById("brandForm");

        const addBrandBtn = document.querySelector("#addBrandBtn");
        if (addBrandBtn) {
            addBrandBtn.addEventListener("click", function () {
                document.getElementById("modalTitle").innerText = "Add Brand";
                brandForm.reset();
                document.getElementById("brandId").value = "";
                brandModal.show();
            });
        }

        document.querySelectorAll(".edit-btn").forEach(btn => {
            btn.addEventListener("click", function () {
                document.getElementById("modalTitle").innerText = "Edit Brand";
                document.getElementById("brandId").value = this.getAttribute("data-id");
                document.getElementById("brandName").value = this.getAttribute("data-name");
                brandModal.show();
            });
        });

        document.querySelectorAll(".delete-btn").forEach(btn => {
            btn.addEventListener("click", function () {
                let brandId = this.getAttribute("data-id");
                if (confirm("Are you sure you want to delete this brand?")) {
                    fetch("?handler=Delete", {
                        method: "POST",
                        headers: { "Content-Type": "application/json", "RequestVerificationToken": token },
                        body: JSON.stringify(brandId)
                    })
                        .then(response => response.json())
                        .then(data => {
                            if (data.success) {
                                alert("Deleted successfully");
                                location.reload();
                            }
                        })
                        .catch(error => console.error("Error:", error));
                }
            });
        });

        brandForm.addEventListener("submit", function (e) {
            e.preventDefault();
            let brandId = document.getElementById("brandId").value;
            let url = brandId ? "?handler=Edit" : "?handler=Create";
            let brandData = {
                Id: brandId || 0,
                Name: document.getElementById("brandName").value
            };

            fetch(url, {
                method: "POST",
                headers: { "Content-Type": "application/json", "RequestVerificationToken": token },
                body: JSON.stringify(brandData)
            })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        alert(data.message);
                        location.reload();
                    }
                })
                .catch(error => console.error("Error:", error));

            brandModal.hide();
        });
    });
</script>